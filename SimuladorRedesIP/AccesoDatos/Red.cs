#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoDatos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Red : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAsociacionesPuertosVLans(AsociacionesPuertosVLans instance);
    partial void UpdateAsociacionesPuertosVLans(AsociacionesPuertosVLans instance);
    partial void DeleteAsociacionesPuertosVLans(AsociacionesPuertosVLans instance);
    partial void InsertCables(Cables instance);
    partial void UpdateCables(Cables instance);
    partial void DeleteCables(Cables instance);
    partial void InsertComputadores(Computadores instance);
    partial void UpdateComputadores(Computadores instance);
    partial void DeleteComputadores(Computadores instance);
    partial void InsertEquipos(Equipos instance);
    partial void UpdateEquipos(Equipos instance);
    partial void DeleteEquipos(Equipos instance);
    partial void InsertEstaciones(Estaciones instance);
    partial void UpdateEstaciones(Estaciones instance);
    partial void DeleteEstaciones(Estaciones instance);
    partial void InsertPuertos(Puertos instance);
    partial void UpdatePuertos(Puertos instance);
    partial void DeletePuertos(Puertos instance);
    partial void InsertPuertosCompletos(PuertosCompletos instance);
    partial void UpdatePuertosCompletos(PuertosCompletos instance);
    partial void DeletePuertosCompletos(PuertosCompletos instance);
    partial void InsertRouters(Routers instance);
    partial void UpdateRouters(Routers instance);
    partial void DeleteRouters(Routers instance);
    partial void InsertRutas(Rutas instance);
    partial void UpdateRutas(Rutas instance);
    partial void DeleteRutas(Rutas instance);
    partial void InsertSwitch(Switch instance);
    partial void UpdateSwitch(Switch instance);
    partial void DeleteSwitch(Switch instance);
    partial void InsertVLans(VLans instance);
    partial void UpdateVLans(VLans instance);
    partial void DeleteVLans(VLans instance);
    #endregion
		
		public Red(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Red(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Red(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Red(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AsociacionesPuertosVLans> AsociacionesPuertosVLans
		{
			get
			{
				return this.GetTable<AsociacionesPuertosVLans>();
			}
		}
		
		public System.Data.Linq.Table<Cables> Cables
		{
			get
			{
				return this.GetTable<Cables>();
			}
		}
		
		public System.Data.Linq.Table<Computadores> Computadores
		{
			get
			{
				return this.GetTable<Computadores>();
			}
		}
		
		public System.Data.Linq.Table<Equipos> Equipos
		{
			get
			{
				return this.GetTable<Equipos>();
			}
		}
		
		public System.Data.Linq.Table<Estaciones> Estaciones
		{
			get
			{
				return this.GetTable<Estaciones>();
			}
		}
		
		public System.Data.Linq.Table<Puertos> Puertos
		{
			get
			{
				return this.GetTable<Puertos>();
			}
		}
		
		public System.Data.Linq.Table<PuertosCompletos> PuertosCompletos
		{
			get
			{
				return this.GetTable<PuertosCompletos>();
			}
		}
		
		public System.Data.Linq.Table<Routers> Routers
		{
			get
			{
				return this.GetTable<Routers>();
			}
		}
		
		public System.Data.Linq.Table<Rutas> Rutas
		{
			get
			{
				return this.GetTable<Rutas>();
			}
		}
		
		public System.Data.Linq.Table<Switch> Switch
		{
			get
			{
				return this.GetTable<Switch>();
			}
		}
		
		public System.Data.Linq.Table<VLans> VLans
		{
			get
			{
				return this.GetTable<VLans>();
			}
		}
	}
	
	[Table()]
	public partial class AsociacionesPuertosVLans : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _IdVLan;
		
		private System.Guid _IdPuerto;
		
		private EntityRef<Puertos> _Puertos;
		
		private EntityRef<VLans> _VLans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnIdVLanChanging(System.Guid value);
    partial void OnIdVLanChanged();
    partial void OnIdPuertoChanging(System.Guid value);
    partial void OnIdPuertoChanged();
    #endregion
		
		public AsociacionesPuertosVLans()
		{
			this._Puertos = default(EntityRef<Puertos>);
			this._VLans = default(EntityRef<VLans>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdVLan", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdVLan
		{
			get
			{
				return this._IdVLan;
			}
			set
			{
				if ((this._IdVLan != value))
				{
					if (this._VLans.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVLanChanging(value);
					this.SendPropertyChanging();
					this._IdVLan = value;
					this.SendPropertyChanged("IdVLan");
					this.OnIdVLanChanged();
				}
			}
		}
		
		[Column(Storage="_IdPuerto", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdPuerto
		{
			get
			{
				return this._IdPuerto;
			}
			set
			{
				if ((this._IdPuerto != value))
				{
					if (this._Puertos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPuertoChanging(value);
					this.SendPropertyChanging();
					this._IdPuerto = value;
					this.SendPropertyChanged("IdPuerto");
					this.OnIdPuertoChanged();
				}
			}
		}
		
		[Association(Name="AsocPuerto", Storage="_Puertos", ThisKey="IdPuerto", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Puertos Puertos
		{
			get
			{
				return this._Puertos.Entity;
			}
			set
			{
				Puertos previousValue = this._Puertos.Entity;
				if (((previousValue != value) 
							|| (this._Puertos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puertos.Entity = null;
						previousValue.AsociacionesPuertosVLans.Remove(this);
					}
					this._Puertos.Entity = value;
					if ((value != null))
					{
						value.AsociacionesPuertosVLans.Add(this);
						this._IdPuerto = value.Id;
					}
					else
					{
						this._IdPuerto = default(System.Guid);
					}
					this.SendPropertyChanged("Puertos");
				}
			}
		}
		
		[Association(Name="AsocVLan", Storage="_VLans", ThisKey="IdVLan", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public VLans VLans
		{
			get
			{
				return this._VLans.Entity;
			}
			set
			{
				VLans previousValue = this._VLans.Entity;
				if (((previousValue != value) 
							|| (this._VLans.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VLans.Entity = null;
						previousValue.AsociacionesPuertosVLans.Remove(this);
					}
					this._VLans.Entity = value;
					if ((value != null))
					{
						value.AsociacionesPuertosVLans.Add(this);
						this._IdVLan = value.Id;
					}
					else
					{
						this._IdVLan = default(System.Guid);
					}
					this.SendPropertyChanged("VLans");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Cables : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _IdPuerto1;
		
		private System.Guid _IdPuerto2;
		
		private EntityRef<Puertos> _Puertos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnIdPuerto1Changing(System.Guid value);
    partial void OnIdPuerto1Changed();
    partial void OnIdPuerto2Changing(System.Guid value);
    partial void OnIdPuerto2Changed();
    #endregion
		
		public Cables()
		{
			this._Puertos = default(EntityRef<Puertos>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdPuerto1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdPuerto1
		{
			get
			{
				return this._IdPuerto1;
			}
			set
			{
				if ((this._IdPuerto1 != value))
				{
					if (this._Puertos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPuerto1Changing(value);
					this.SendPropertyChanging();
					this._IdPuerto1 = value;
					this.SendPropertyChanged("IdPuerto1");
					this.OnIdPuerto1Changed();
				}
			}
		}
		
		[Column(Storage="_IdPuerto2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdPuerto2
		{
			get
			{
				return this._IdPuerto2;
			}
			set
			{
				if ((this._IdPuerto2 != value))
				{
					this.OnIdPuerto2Changing(value);
					this.SendPropertyChanging();
					this._IdPuerto2 = value;
					this.SendPropertyChanged("IdPuerto2");
					this.OnIdPuerto2Changed();
				}
			}
		}
		
		[Association(Name="p1", Storage="_Puertos", ThisKey="IdPuerto1", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Puertos Puertos
		{
			get
			{
				return this._Puertos.Entity;
			}
			set
			{
				Puertos previousValue = this._Puertos.Entity;
				if (((previousValue != value) 
							|| (this._Puertos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puertos.Entity = null;
						previousValue.Cables.Remove(this);
					}
					this._Puertos.Entity = value;
					if ((value != null))
					{
						value.Cables.Add(this);
						this._IdPuerto1 = value.Id;
					}
					else
					{
						this._IdPuerto1 = default(System.Guid);
					}
					this.SendPropertyChanged("Puertos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Computadores : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _DefaultGateWay;
		
		private EntityRef<Equipos> _Equipos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDefaultGateWayChanging(string value);
    partial void OnDefaultGateWayChanged();
    #endregion
		
		public Computadores()
		{
			this._Equipos = default(EntityRef<Equipos>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Equipos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultGateWay", DbType="NVarChar(100)")]
		public string DefaultGateWay
		{
			get
			{
				return this._DefaultGateWay;
			}
			set
			{
				if ((this._DefaultGateWay != value))
				{
					this.OnDefaultGateWayChanging(value);
					this.SendPropertyChanging();
					this._DefaultGateWay = value;
					this.SendPropertyChanged("DefaultGateWay");
					this.OnDefaultGateWayChanged();
				}
			}
		}
		
		[Association(Name="ComputadoresEquipos", Storage="_Equipos", ThisKey="Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Equipos Equipos
		{
			get
			{
				return this._Equipos.Entity;
			}
			set
			{
				Equipos previousValue = this._Equipos.Entity;
				if (((previousValue != value) 
							|| (this._Equipos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipos.Entity = null;
						previousValue.Computadores = null;
					}
					this._Equipos.Entity = value;
					if ((value != null))
					{
						value.Computadores = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(System.Guid);
					}
					this.SendPropertyChanged("Equipos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Equipos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _X;
		
		private int _Y;
		
		private int _TipoDeEquipo;
		
		private System.Guid _IdEstacion;
		
		private string _Nombre;
		
		private EntityRef<Computadores> _Computadores;
		
		private EntityRef<Estaciones> _Estaciones;
		
		private EntitySet<Puertos> _Puertos;
		
		private EntityRef<Routers> _Routers;
		
		private EntityRef<Switch> _Switch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnXChanging(int value);
    partial void OnXChanged();
    partial void OnYChanging(int value);
    partial void OnYChanged();
    partial void OnTipoDeEquipoChanging(int value);
    partial void OnTipoDeEquipoChanged();
    partial void OnIdEstacionChanging(System.Guid value);
    partial void OnIdEstacionChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Equipos()
		{
			this._Computadores = default(EntityRef<Computadores>);
			this._Estaciones = default(EntityRef<Estaciones>);
			this._Puertos = new EntitySet<Puertos>(new Action<Puertos>(this.attach_Puertos), new Action<Puertos>(this.detach_Puertos));
			this._Routers = default(EntityRef<Routers>);
			this._Switch = default(EntityRef<Switch>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_X", DbType="Int NOT NULL")]
		public int X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[Column(Storage="_Y", DbType="Int NOT NULL")]
		public int Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[Column(Storage="_TipoDeEquipo", DbType="Int NOT NULL")]
		public int TipoDeEquipo
		{
			get
			{
				return this._TipoDeEquipo;
			}
			set
			{
				if ((this._TipoDeEquipo != value))
				{
					this.OnTipoDeEquipoChanging(value);
					this.SendPropertyChanging();
					this._TipoDeEquipo = value;
					this.SendPropertyChanged("TipoDeEquipo");
					this.OnTipoDeEquipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdEstacion", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdEstacion
		{
			get
			{
				return this._IdEstacion;
			}
			set
			{
				if ((this._IdEstacion != value))
				{
					if (this._Estaciones.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEstacionChanging(value);
					this.SendPropertyChanging();
					this._IdEstacion = value;
					this.SendPropertyChanged("IdEstacion");
					this.OnIdEstacionChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="NVarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="ComputadoresEquipos", Storage="_Computadores", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public Computadores Computadores
		{
			get
			{
				return this._Computadores.Entity;
			}
			set
			{
				Computadores previousValue = this._Computadores.Entity;
				if (((previousValue != value) 
							|| (this._Computadores.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computadores.Entity = null;
						previousValue.Equipos = null;
					}
					this._Computadores.Entity = value;
					if ((value != null))
					{
						value.Equipos = this;
					}
					this.SendPropertyChanged("Computadores");
				}
			}
		}
		
		[Association(Name="EquiposEstaciones", Storage="_Estaciones", ThisKey="IdEstacion", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Estaciones Estaciones
		{
			get
			{
				return this._Estaciones.Entity;
			}
			set
			{
				Estaciones previousValue = this._Estaciones.Entity;
				if (((previousValue != value) 
							|| (this._Estaciones.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estaciones.Entity = null;
						previousValue.Equipos.Remove(this);
					}
					this._Estaciones.Entity = value;
					if ((value != null))
					{
						value.Equipos.Add(this);
						this._IdEstacion = value.Id;
					}
					else
					{
						this._IdEstacion = default(System.Guid);
					}
					this.SendPropertyChanged("Estaciones");
				}
			}
		}
		
		[Association(Name="PuertoEquipo", Storage="_Puertos", ThisKey="Id", OtherKey="IdEquipo", DeleteRule="CASCADE")]
		public EntitySet<Puertos> Puertos
		{
			get
			{
				return this._Puertos;
			}
			set
			{
				this._Puertos.Assign(value);
			}
		}
		
		[Association(Name="RouterEQuipo", Storage="_Routers", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public Routers Routers
		{
			get
			{
				return this._Routers.Entity;
			}
			set
			{
				Routers previousValue = this._Routers.Entity;
				if (((previousValue != value) 
							|| (this._Routers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Routers.Entity = null;
						previousValue.Equipos = null;
					}
					this._Routers.Entity = value;
					if ((value != null))
					{
						value.Equipos = this;
					}
					this.SendPropertyChanged("Routers");
				}
			}
		}
		
		[Association(Name="SwitchEquipos", Storage="_Switch", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public Switch Switch
		{
			get
			{
				return this._Switch.Entity;
			}
			set
			{
				Switch previousValue = this._Switch.Entity;
				if (((previousValue != value) 
							|| (this._Switch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Switch.Entity = null;
						previousValue.Equipos = null;
					}
					this._Switch.Entity = value;
					if ((value != null))
					{
						value.Equipos = this;
					}
					this.SendPropertyChanged("Switch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Puertos(Puertos entity)
		{
			this.SendPropertyChanging();
			entity.Equipos = this;
		}
		
		private void detach_Puertos(Puertos entity)
		{
			this.SendPropertyChanging();
			entity.Equipos = null;
		}
	}
	
	[Table()]
	public partial class Estaciones : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Nombre;
		
		private System.Data.Linq.Binary _Foto;
		
		private string _Descripcion;
		
		private System.DateTime _Fecha;
		
		private EntitySet<Equipos> _Equipos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnFotoChanging(System.Data.Linq.Binary value);
    partial void OnFotoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Estaciones()
		{
			this._Equipos = new EntitySet<Equipos>(new Action<Equipos>(this.attach_Equipos), new Action<Equipos>(this.detach_Equipos));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="NVarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Foto", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Foto
		{
			get
			{
				return this._Foto;
			}
			set
			{
				if ((this._Foto != value))
				{
					this.OnFotoChanging(value);
					this.SendPropertyChanging();
					this._Foto = value;
					this.SendPropertyChanged("Foto");
					this.OnFotoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="NVarChar(2000)")]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="EquiposEstaciones", Storage="_Equipos", ThisKey="Id", OtherKey="IdEstacion", DeleteRule="CASCADE")]
		public EntitySet<Equipos> Equipos
		{
			get
			{
				return this._Equipos;
			}
			set
			{
				this._Equipos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipos(Equipos entity)
		{
			this.SendPropertyChanging();
			entity.Estaciones = this;
		}
		
		private void detach_Equipos(Equipos entity)
		{
			this.SendPropertyChanging();
			entity.Estaciones = null;
		}
	}
	
	[Table()]
	public partial class Puertos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _IdEquipo;
		
		private string _Nombre;
		
		private EntitySet<AsociacionesPuertosVLans> _AsociacionesPuertosVLans;
		
		private EntitySet<Cables> _Cables;
		
		private EntityRef<Equipos> _Equipos;
		
		private EntityRef<PuertosCompletos> _PuertosCompletos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnIdEquipoChanging(System.Guid value);
    partial void OnIdEquipoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Puertos()
		{
			this._AsociacionesPuertosVLans = new EntitySet<AsociacionesPuertosVLans>(new Action<AsociacionesPuertosVLans>(this.attach_AsociacionesPuertosVLans), new Action<AsociacionesPuertosVLans>(this.detach_AsociacionesPuertosVLans));
			this._Cables = new EntitySet<Cables>(new Action<Cables>(this.attach_Cables), new Action<Cables>(this.detach_Cables));
			this._Equipos = default(EntityRef<Equipos>);
			this._PuertosCompletos = default(EntityRef<PuertosCompletos>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdEquipo", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdEquipo
		{
			get
			{
				return this._IdEquipo;
			}
			set
			{
				if ((this._IdEquipo != value))
				{
					if (this._Equipos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEquipoChanging(value);
					this.SendPropertyChanging();
					this._IdEquipo = value;
					this.SendPropertyChanged("IdEquipo");
					this.OnIdEquipoChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="NVarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="AsocPuerto", Storage="_AsociacionesPuertosVLans", ThisKey="Id", OtherKey="IdPuerto", DeleteRule="CASCADE")]
		public EntitySet<AsociacionesPuertosVLans> AsociacionesPuertosVLans
		{
			get
			{
				return this._AsociacionesPuertosVLans;
			}
			set
			{
				this._AsociacionesPuertosVLans.Assign(value);
			}
		}
		
		[Association(Name="p1", Storage="_Cables", ThisKey="Id", OtherKey="IdPuerto1", DeleteRule="CASCADE")]
		public EntitySet<Cables> Cables
		{
			get
			{
				return this._Cables;
			}
			set
			{
				this._Cables.Assign(value);
			}
		}
		
		[Association(Name="PuertoEquipo", Storage="_Equipos", ThisKey="IdEquipo", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Equipos Equipos
		{
			get
			{
				return this._Equipos.Entity;
			}
			set
			{
				Equipos previousValue = this._Equipos.Entity;
				if (((previousValue != value) 
							|| (this._Equipos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipos.Entity = null;
						previousValue.Puertos.Remove(this);
					}
					this._Equipos.Entity = value;
					if ((value != null))
					{
						value.Puertos.Add(this);
						this._IdEquipo = value.Id;
					}
					else
					{
						this._IdEquipo = default(System.Guid);
					}
					this.SendPropertyChanged("Equipos");
				}
			}
		}
		
		[Association(Storage="_PuertosCompletos", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public PuertosCompletos PuertosCompletos
		{
			get
			{
				return this._PuertosCompletos.Entity;
			}
			set
			{
				PuertosCompletos previousValue = this._PuertosCompletos.Entity;
				if (((previousValue != value) 
							|| (this._PuertosCompletos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PuertosCompletos.Entity = null;
						previousValue.Puertos = null;
					}
					this._PuertosCompletos.Entity = value;
					if ((value != null))
					{
						value.Puertos = this;
					}
					this.SendPropertyChanged("PuertosCompletos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AsociacionesPuertosVLans(AsociacionesPuertosVLans entity)
		{
			this.SendPropertyChanging();
			entity.Puertos = this;
		}
		
		private void detach_AsociacionesPuertosVLans(AsociacionesPuertosVLans entity)
		{
			this.SendPropertyChanging();
			entity.Puertos = null;
		}
		
		private void attach_Cables(Cables entity)
		{
			this.SendPropertyChanging();
			entity.Puertos = this;
		}
		
		private void detach_Cables(Cables entity)
		{
			this.SendPropertyChanging();
			entity.Puertos = null;
		}
	}
	
	[Table()]
	public partial class PuertosCompletos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _DireccionIP;
		
		private System.Nullable<int> _Mascara;
		
		private string _DireccionMAC;
		
		private EntityRef<Puertos> _Puertos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDireccionIPChanging(string value);
    partial void OnDireccionIPChanged();
    partial void OnMascaraChanging(System.Nullable<int> value);
    partial void OnMascaraChanged();
    partial void OnDireccionMACChanging(string value);
    partial void OnDireccionMACChanged();
    #endregion
		
		public PuertosCompletos()
		{
			this._Puertos = default(EntityRef<Puertos>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Puertos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DireccionIP", DbType="NVarChar(100)")]
		public string DireccionIP
		{
			get
			{
				return this._DireccionIP;
			}
			set
			{
				if ((this._DireccionIP != value))
				{
					this.OnDireccionIPChanging(value);
					this.SendPropertyChanging();
					this._DireccionIP = value;
					this.SendPropertyChanged("DireccionIP");
					this.OnDireccionIPChanged();
				}
			}
		}
		
		[Column(Storage="_Mascara", DbType="Int")]
		public System.Nullable<int> Mascara
		{
			get
			{
				return this._Mascara;
			}
			set
			{
				if ((this._Mascara != value))
				{
					this.OnMascaraChanging(value);
					this.SendPropertyChanging();
					this._Mascara = value;
					this.SendPropertyChanged("Mascara");
					this.OnMascaraChanged();
				}
			}
		}
		
		[Column(Storage="_DireccionMAC", DbType="NVarChar(100)")]
		public string DireccionMAC
		{
			get
			{
				return this._DireccionMAC;
			}
			set
			{
				if ((this._DireccionMAC != value))
				{
					this.OnDireccionMACChanging(value);
					this.SendPropertyChanging();
					this._DireccionMAC = value;
					this.SendPropertyChanged("DireccionMAC");
					this.OnDireccionMACChanged();
				}
			}
		}
		
		[Association(Name="PuertosCompletos", Storage="_Puertos", ThisKey="Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Puertos Puertos
		{
			get
			{
				return this._Puertos.Entity;
			}
			set
			{
				Puertos previousValue = this._Puertos.Entity;
				if (((previousValue != value) 
							|| (this._Puertos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Puertos.Entity = null;
						previousValue.PuertosCompletos = null;
					}
					this._Puertos.Entity = value;
					if ((value != null))
					{
						value.PuertosCompletos = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(System.Guid);
					}
					this.SendPropertyChanged("Puertos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Routers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private EntityRef<Equipos> _Equipos;
		
		private EntitySet<Rutas> _Rutas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public Routers()
		{
			this._Equipos = default(EntityRef<Equipos>);
			this._Rutas = new EntitySet<Rutas>(new Action<Rutas>(this.attach_Rutas), new Action<Rutas>(this.detach_Rutas));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Equipos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="RouterEQuipo", Storage="_Equipos", ThisKey="Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Equipos Equipos
		{
			get
			{
				return this._Equipos.Entity;
			}
			set
			{
				Equipos previousValue = this._Equipos.Entity;
				if (((previousValue != value) 
							|| (this._Equipos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipos.Entity = null;
						previousValue.Routers = null;
					}
					this._Equipos.Entity = value;
					if ((value != null))
					{
						value.Routers = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(System.Guid);
					}
					this.SendPropertyChanged("Equipos");
				}
			}
		}
		
		[Association(Name="RutasRouter", Storage="_Rutas", ThisKey="Id", OtherKey="IdRouter", DeleteRule="CASCADE")]
		public EntitySet<Rutas> Rutas
		{
			get
			{
				return this._Rutas;
			}
			set
			{
				this._Rutas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rutas(Rutas entity)
		{
			this.SendPropertyChanging();
			entity.Routers = this;
		}
		
		private void detach_Rutas(Rutas entity)
		{
			this.SendPropertyChanging();
			entity.Routers = null;
		}
	}
	
	[Table()]
	public partial class Rutas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _IdPuerto;
		
		private long _Red;
		
		private System.Guid _IdRouter;
		
		private System.Nullable<int> _Mascara;
		
		private string _NextHopIP;
		
		private EntityRef<Routers> _Routers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnIdPuertoChanging(System.Guid value);
    partial void OnIdPuertoChanged();
    partial void OnRedChanging(long value);
    partial void OnRedChanged();
    partial void OnIdRouterChanging(System.Guid value);
    partial void OnIdRouterChanged();
    partial void OnMascaraChanging(System.Nullable<int> value);
    partial void OnMascaraChanged();
    partial void OnNextHopIPChanging(string value);
    partial void OnNextHopIPChanged();
    #endregion
		
		public Rutas()
		{
			this._Routers = default(EntityRef<Routers>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdPuerto", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdPuerto
		{
			get
			{
				return this._IdPuerto;
			}
			set
			{
				if ((this._IdPuerto != value))
				{
					this.OnIdPuertoChanging(value);
					this.SendPropertyChanging();
					this._IdPuerto = value;
					this.SendPropertyChanged("IdPuerto");
					this.OnIdPuertoChanged();
				}
			}
		}
		
		[Column(Storage="_Red", DbType="BigInt NOT NULL")]
		public long Red
		{
			get
			{
				return this._Red;
			}
			set
			{
				if ((this._Red != value))
				{
					this.OnRedChanging(value);
					this.SendPropertyChanging();
					this._Red = value;
					this.SendPropertyChanged("Red");
					this.OnRedChanged();
				}
			}
		}
		
		[Column(Storage="_IdRouter", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdRouter
		{
			get
			{
				return this._IdRouter;
			}
			set
			{
				if ((this._IdRouter != value))
				{
					if (this._Routers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRouterChanging(value);
					this.SendPropertyChanging();
					this._IdRouter = value;
					this.SendPropertyChanged("IdRouter");
					this.OnIdRouterChanged();
				}
			}
		}
		
		[Column(Storage="_Mascara", DbType="Int")]
		public System.Nullable<int> Mascara
		{
			get
			{
				return this._Mascara;
			}
			set
			{
				if ((this._Mascara != value))
				{
					this.OnMascaraChanging(value);
					this.SendPropertyChanging();
					this._Mascara = value;
					this.SendPropertyChanged("Mascara");
					this.OnMascaraChanged();
				}
			}
		}
		
		[Column(Storage="_NextHopIP", DbType="NVarChar(100)")]
		public string NextHopIP
		{
			get
			{
				return this._NextHopIP;
			}
			set
			{
				if ((this._NextHopIP != value))
				{
					this.OnNextHopIPChanging(value);
					this.SendPropertyChanging();
					this._NextHopIP = value;
					this.SendPropertyChanged("NextHopIP");
					this.OnNextHopIPChanged();
				}
			}
		}
		
		[Association(Name="RutasRouter", Storage="_Routers", ThisKey="IdRouter", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Routers Routers
		{
			get
			{
				return this._Routers.Entity;
			}
			set
			{
				Routers previousValue = this._Routers.Entity;
				if (((previousValue != value) 
							|| (this._Routers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Routers.Entity = null;
						previousValue.Rutas.Remove(this);
					}
					this._Routers.Entity = value;
					if ((value != null))
					{
						value.Rutas.Add(this);
						this._IdRouter = value.Id;
					}
					else
					{
						this._IdRouter = default(System.Guid);
					}
					this.SendPropertyChanged("Routers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Switch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private EntityRef<Equipos> _Equipos;
		
		private EntitySet<VLans> _VLans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public Switch()
		{
			this._Equipos = default(EntityRef<Equipos>);
			this._VLans = new EntitySet<VLans>(new Action<VLans>(this.attach_VLans), new Action<VLans>(this.detach_VLans));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Equipos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="SwitchEquipos", Storage="_Equipos", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Equipos Equipos
		{
			get
			{
				return this._Equipos.Entity;
			}
			set
			{
				Equipos previousValue = this._Equipos.Entity;
				if (((previousValue != value) 
							|| (this._Equipos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipos.Entity = null;
						previousValue.Switch = null;
					}
					this._Equipos.Entity = value;
					if ((value != null))
					{
						value.Switch = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(System.Guid);
					}
					this.SendPropertyChanged("Equipos");
				}
			}
		}
		
		[Association(Name="VlanSwitch", Storage="_VLans", ThisKey="Id", OtherKey="IdSwitch", DeleteRule="CASCADE")]
		public EntitySet<VLans> VLans
		{
			get
			{
				return this._VLans;
			}
			set
			{
				this._VLans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VLans(VLans entity)
		{
			this.SendPropertyChanging();
			entity.Switch = this;
		}
		
		private void detach_VLans(VLans entity)
		{
			this.SendPropertyChanging();
			entity.Switch = null;
		}
	}
	
	[Table()]
	public partial class VLans : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _IdSwitch;
		
		private string _Nombre;
		
		private EntitySet<AsociacionesPuertosVLans> _AsociacionesPuertosVLans;
		
		private EntityRef<Switch> _Switch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnIdSwitchChanging(System.Guid value);
    partial void OnIdSwitchChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public VLans()
		{
			this._AsociacionesPuertosVLans = new EntitySet<AsociacionesPuertosVLans>(new Action<AsociacionesPuertosVLans>(this.attach_AsociacionesPuertosVLans), new Action<AsociacionesPuertosVLans>(this.detach_AsociacionesPuertosVLans));
			this._Switch = default(EntityRef<Switch>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdSwitch", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdSwitch
		{
			get
			{
				return this._IdSwitch;
			}
			set
			{
				if ((this._IdSwitch != value))
				{
					if (this._Switch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSwitchChanging(value);
					this.SendPropertyChanging();
					this._IdSwitch = value;
					this.SendPropertyChanged("IdSwitch");
					this.OnIdSwitchChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="NVarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="AsocVLan", Storage="_AsociacionesPuertosVLans", ThisKey="Id", OtherKey="IdVLan", DeleteRule="CASCADE")]
		public EntitySet<AsociacionesPuertosVLans> AsociacionesPuertosVLans
		{
			get
			{
				return this._AsociacionesPuertosVLans;
			}
			set
			{
				this._AsociacionesPuertosVLans.Assign(value);
			}
		}
		
		[Association(Name="VlanSwitch", Storage="_Switch", ThisKey="IdSwitch", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Switch Switch
		{
			get
			{
				return this._Switch.Entity;
			}
			set
			{
				Switch previousValue = this._Switch.Entity;
				if (((previousValue != value) 
							|| (this._Switch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Switch.Entity = null;
						previousValue.VLans.Remove(this);
					}
					this._Switch.Entity = value;
					if ((value != null))
					{
						value.VLans.Add(this);
						this._IdSwitch = value.Id;
					}
					else
					{
						this._IdSwitch = default(System.Guid);
					}
					this.SendPropertyChanged("Switch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AsociacionesPuertosVLans(AsociacionesPuertosVLans entity)
		{
			this.SendPropertyChanging();
			entity.VLans = this;
		}
		
		private void detach_AsociacionesPuertosVLans(AsociacionesPuertosVLans entity)
		{
			this.SendPropertyChanging();
			entity.VLans = null;
		}
	}
}
#pragma warning restore 1591
