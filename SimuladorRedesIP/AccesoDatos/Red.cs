#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class Red : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEquipos(Equipos instance);
  partial void UpdateEquipos(Equipos instance);
  partial void DeleteEquipos(Equipos instance);
  #endregion
	
	public Red(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Red(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Red(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Red(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Equipos> Equipos
	{
		get
		{
			return this.GetTable<Equipos>();
		}
	}
}

[Table()]
public partial class Equipos : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private double _X;
	
	private double _Y;
	
	private int _TipoDeEquipo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnXChanging(double value);
    partial void OnXChanged();
    partial void OnYChanging(double value);
    partial void OnYChanged();
    partial void OnTipoDeEquipoChanging(int value);
    partial void OnTipoDeEquipoChanged();
    #endregion
	
	public Equipos()
	{
		OnCreated();
	}
	
	[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_X", DbType="Float NOT NULL")]
	public double X
	{
		get
		{
			return this._X;
		}
		set
		{
			if ((this._X != value))
			{
				this.OnXChanging(value);
				this.SendPropertyChanging();
				this._X = value;
				this.SendPropertyChanged("X");
				this.OnXChanged();
			}
		}
	}
	
	[Column(Storage="_Y", DbType="Float NOT NULL")]
	public double Y
	{
		get
		{
			return this._Y;
		}
		set
		{
			if ((this._Y != value))
			{
				this.OnYChanging(value);
				this.SendPropertyChanging();
				this._Y = value;
				this.SendPropertyChanged("Y");
				this.OnYChanged();
			}
		}
	}
	
	[Column(Storage="_TipoDeEquipo", DbType="Int NOT NULL")]
	public int TipoDeEquipo
	{
		get
		{
			return this._TipoDeEquipo;
		}
		set
		{
			if ((this._TipoDeEquipo != value))
			{
				this.OnTipoDeEquipoChanging(value);
				this.SendPropertyChanging();
				this._TipoDeEquipo = value;
				this.SendPropertyChanged("TipoDeEquipo");
				this.OnTipoDeEquipoChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
